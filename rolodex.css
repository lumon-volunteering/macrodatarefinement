    #controlButton {
    position: fixed;
    width: 40px;
    height: 40px;
    scale: 1.5;
    background: black;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    transform: rotate(-60deg); /* Default: rotated 60° anticlockwise */
    transition: transform 0.3s ease;
    z-index: 10000;
    }

    #controlButton::before {
    content: "";
    position: absolute;
    top: 0%;
    left: 50%;
    transform: translateX(-50%);
    width: 3px;
    height: 6px;
    background: white;
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
    }

    /* Smaller inner circle (dark grey) */
    #controlButton .innerStar {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    height: 90%;
    transform: translate(-50%, -50%) rotate(20deg);
    }

    #controlButton.rotated {
    transform: rotate(60deg);
    }

    @keyframes closeAnimation {
    0% {
        transform: scale(1, 1);
        opacity: 1;
    }
    50% {
        transform: scale(1, 0.01);
        opacity: 1;
    }
    100% {
        transform: scale(0.01, 0.01);
        opacity: 0;
    }
    }

    @keyframes openAnimation {
    0% {
        transform: scale(0.01, 0.01);
        opacity: 0;
    }
    50% {
        transform: scale(1, 0.01);
        opacity: 1;
    }
    100% {
        transform: scale(1, 1);
        opacity: 1;
    }
    }

    #appContainer.closeAnim {
    animation: closeAnimation 0.6s forwards;
    }
    #appContainer.openAnim {
    animation: openAnimation 0.6s forwards;
    }    

    #fullScreenOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;  /* Full viewport width */
      height: 100vh; /* Full viewport height */
      z-index: 9999; /* Ensure it sits on top of everything */
      pointer-events: none; /* Allow interactions to pass through */
      cursor: auto;
    }


    /* Ensure the document fills the viewport */
    html, body {
      margin: 0;
      padding: 0;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      background: #001C2E;
    }

    /* Fullscreen wrapper using Grid to center content */
    #pageWrapper {
      display: grid;
      place-items: center;
      width: 100vw;
      height: 100vh;
      background: #000000;
      /* Optionally, add your CRT effect class here if needed:
        class="crt" */
    }

    #offScreen {

    position: absolute;
    width: calc(min(90vw, 1.5 * 85vh));
    height: calc(min(90vh, 90vw / 1.5));
    background: radial-gradient(ellipse farthest-corner, rgba(0,28,46,0) 50%, #181818 100%);
    z-index: 2;
    border-radius: 100px;
    overflow: hidden;
    margin-left: -450px;
    }

    /* The inner container that always maintains a 1.5:1 ratio.
      It will expand to the maximum size that fits inside the viewport. */
    #appContainer {
      /* The width will be the smaller of:
        - 100vw, or
        - 1.5 times 100vh (since 1.5:1 means width = 1.5 x height) */
      width: calc(min(90vw, 1.5 * 85vh));
      /* Similarly, the height will be the smaller of:
        - 100vh, or
        - 100vw divided by 1.5 */
      height: calc(min(90vh, 90vw / 1.5));
      background: #001c2e;
      position: relative;
      /* Optionally add a border or other styling for debugging */
      border-radius: 100px;
      overflow: hidden;
      cursor: none;
    }

    #customCursor {
    position: fixed;
    pointer-events: none;
    z-index: 1;
    width: 32px;  /* adjust size as needed */
    height: 32px; /* adjust size as needed */
    transform: translate(-20.8%, 0);
    filter: drop-shadow(0 0 6px #fff);
    }


    html, body {
      margin: 0;
      padding: 0;
      background: #001C2E;
      height: 100vh;
      overflow: visible;
      font-family: Gotham, sans-serif;
    }
    /* Keyframe for fadeInGrow effect on page load */
    @keyframes fadeInGrow {
      0% { opacity: 0; transform: scale(0.5); }
      100% { opacity: 1; transform: scale(1); }
    }
    /* Center container */
    body {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    /* Rolodex container with 3D perspective, white glow filter, and fadeInGrow over 4s */
    .rolodex-container {
      position: relative;
      width: 300px;
      height: 300px;
      perspective: 1000px;
      overflow: visible;
      filter: url(#whiteGlow);
      opacity: 0;
      transform: scale(0.5);
      animation: fadeInGrow 4s ease-out forwards;
    }
    /* Wrap all UI elements in a container for fade-out.
       This container’s fade-out will not affect the background or CRT filter. */
    #uiContainer {
      opacity: 1;
      transition: opacity 0.7s ease-out;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    /* Static file tiles */
    .static {
      position: absolute;
      width: 240px;
      height: 180px;
      background: #001C2E;
      border: 3px solid #37DFEF;
      border-radius: 8px;
      color: #37DFEF;
      left: calc(50% - 120px);
      z-index: 0;
    }
    .static-file-name {
      position: relative;
      z-index: 10;
      width: 100%;
      text-align: center;
      top: 50%;
      transform: translateY(-50%);
      color: #37DFEF;
      font-size: 32px;
      pointer-events: none;
      filter: url(#whiteGlow);
    }
    #staticTop { bottom: calc(50% + 10px); }
    #staticBottom { top: calc(50% + 10px); }
    /* Animated overlay elements */
    .animated {
      position: absolute;
      width: 240px;
      height: 180px;
      background: #001C2E;
      border: 3px solid #37DFEF;
      border-radius: 8px;
      font-family: Gotham, sans-serif;
      font-size: 32px;
      line-height: 180px;
      text-align: center;
      backface-visibility: hidden;
      transform-style: preserve-3d;
      left: calc(50% - 120px);
      will-change: transform;
    }
    /* Tab containers */
    .top-tab-container, .bottom-tab-container {
      position: absolute;
      width: 50px;
      height: 25px;
      border-radius: 5px;
      overflow: hidden;
      z-index: 4;
    }
    .top-tab-container { bottom: 100%; }
    .bottom-tab-container { top: 100%; }
    /* New vertical pill shapes (portrait) */
    .pill {
      position: absolute;
      width: 15px;
      height: 52px; /* 40% of 130px roller container height */
      background: #c1f3f7;
      border: solid #37dfef 2px;
      border-radius: 7.5px;
      z-index: 500; /* Sits above static layer but below animation overlays */
    }
    /* Position pills – further apart horizontally */
    .left-pill {
      left: 83px;
      top: calc(50% - 26px);
    }
    .right-pill {
      left: 203px;
      top: calc(50% - 26px);
    }
    /* Roller containers: width reduced to ~23px (66% of original 35px) */
    .line-stack {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: 23px;
      height: 130px;
      overflow: hidden;
      z-index: 2;
    }
    /* Shift rollers: left roller moved left by 10px, right roller moved right by 15px */
    .left-stack { left: -10px; }
    .right-stack { right: -15px; }
    .line-stack-inner {
      position: relative;
      width: 100%;
      height: 100%;
    }
    /* Roller lines: spacing uses an exponent of 1.5 for larger spacing toward the middle */
    .line {
      background-color: #37DFEF;
      width: 100%;
      height: 5px;
      position: absolute;
      left: 0;
    }
    /* Container for dynamic animation overlays */
    .animation-overlay {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      transform-style: preserve-3d;
    }
    /* Flash line style – a thin horizontal line that flashes briefly; extended width */
    .flash-line {
      position: absolute;
      width: 280px;
      height: 2px;
      background: #37DFEF;
      left: calc(50% - 140px);
      top: 150px;
      pointer-events: none;
      z-index: 2000;
    }
    /* --- Keyframe animations --- */
    /* Forward Flick (Scroll Down) */
    @keyframes flipOutTop {
      0% { transform: rotateX(0deg); }
      100% { transform: rotateX(-180deg); }
    }
    @keyframes flipInBottom {
      0% { transform: rotateX(180deg); }
      100% { transform: rotateX(0deg); }
    }
    /* Backward Flick (Scroll Up) */
    @keyframes flipOutBottom {
      0% { transform: rotateX(0deg); }
      100% { transform: rotateX(180deg); }
    }
    @keyframes flipInTop {
      0% { transform: rotateX(-180deg); }
      100% { transform: rotateX(0deg); }
    }


    /* ===== CRT Effect Filter (without text shadow animation) ===== */
    @keyframes flicker {
      0% { opacity: 0.27861; }
      5% { opacity: 0.34769; }
      10% { opacity: 0.23604; }
      15% { opacity: 0.90626; }
      20% { opacity: 0.18128; }
      25% { opacity: 0.83891; }
      30% { opacity: 0.65583; }
      35% { opacity: 0.67807; }
      40% { opacity: 0.26559; }
      45% { opacity: 0.84693; }
      50% { opacity: 0.96019; }
      55% { opacity: 0.08594; }
      60% { opacity: 0.20313; }
      65% { opacity: 0.71988; }
      70% { opacity: 0.53455; }
      75% { opacity: 0.37288; }
      80% { opacity: 0.71428; }
      85% { opacity: 0.70419; }
      90% { opacity: 0.7003; }
      95% { opacity: 0.36108; }
      100% { opacity: 0.24387; }
    }
    
    /* The .crt class no longer applies any text shadow animation,
       but it still establishes relative positioning so that the pseudo-elements overlay the page. */
    .crt {
      position: relative;
    }
    
    .crt::after {
      content: " ";
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background: rgba(18, 16, 16, 0.1);
      opacity: 0;
      z-index: 20000;
      pointer-events: none;
      animation: flicker 0.15s infinite;
    }
    
    /* Vignette effect added to the CRT filter */
    .crt::before {
      content: " ";
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background: radial-gradient(ellipse farthest-corner, rgba(0,28,46,0) 75%, #000b13 100%),
                  linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%),
                  linear-gradient(90deg, rgba(255, 0, 0, 0.06), rgba(0, 255, 0, 0.02), rgba(0, 0, 255, 0.06));
      z-index: 20000;
      background-size: cover, 100% 2px, 3px 100%;
      pointer-events: none;
    }

    /* New overlay element fills appContainer and sits on top */
    #bouncingGlobeOverlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #001c2e;
      opacity: 0; /* hidden by default */
      z-index: 9999; /* above all other content in appContainer */
      transition: opacity 1s ease;
      pointer-events: none; /* so it won’t block underlying interactions */
    }

    /* Optional: style for the globe SVG so that it can be animated */
    #globeSvg {
      position: absolute;
      /* starting position (will be updated via JS) */
      left: 0;
      top: 0;
      opacity: 0;
      transition: opacity 1s ease 2s;
    }
    .glow {
      filter: drop-shadow(0 0 4px #37dfef);
    }

    #totalProgressPercent {
      position: absolute;
      top: 65%;
      right: 45%;
      font-size: 18px;
      color: #37dfef;
      font-weight: bold;
      filter: drop-shadow(0 0 4px #ffffff);
    }